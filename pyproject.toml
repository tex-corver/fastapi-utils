[tool.poetry]
name = "tex-corver-fastapi-utils"
version = "0.1.0"
description = ""
authors = ["lle <hjjddbz@gmail.com>"]
readme = "README.md"
packages = [
    { include = "fastapi_utils", from = "src" },
]

[tool.poetry.dependencies]
python = "^3.12"
black = "^23.11.0"
pydantic = "^2.6.2"
icecream = "^2.1.3"
fastapi = "0.111.0"

tex-corver-utils = {git = "git@github.com:tex-corver/utils.git"}
tex-corver-io-schema = {git = "git@github.com:tex-corver/io-schema.git"}

[tool.poetry.group.dev.dependencies]
ipython = "^8.22.2"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pylint."MAIN"]
analyse-fallback-blocks = "no"
clear-cache-post-run = "no"
fail-under = 10
ignore = "CVS"
jobs = 1
limit-inference-results = 100
persistent = "yes"
py-version = 3.12
recursive = "yes"
suggestion-mode = "yes"
unsafe-load-any-extension = "no"

[tool.pylint."BASIC"]
argument-naming-style = "snake_case"
attr-naming-style = "snake_case"
bad-names = ["foo", "bar"]
class-const-naming-style = "UPPER_CASE"
class-naming-style = "PascalCase"
const-naming-style = "UPPER_CASE"
docstring-min-length = -1
function-naming-style = "snake_case"
good-names = ["i", "j", "k", "ex", "Run", "_"]
inlinevar-naming-style = "any"
method-naming-style = "snake_case"
module-naming-style = "snake_case"
variable-naming-style = "snake_case"

[tool.pylint."EXCEPTIONS"]
overgeneral-exceptions = ["builtins.BaseException", "builtins.Exception"]

[tool.pylint."FORMAT"]
indent-after-paren = 4
single-line-class-stmt = "no"
single-line-if-stmt = "yes"
indent-string = '    '
max-line-length = 100
max-module-lines = 1000

[tool.pylint."MESSAGES CONTROL"]

confidence = [
    "HIGH",
    "CONTROL_FLOW",
    "INFERENCE",
    "INFERENCE_FAILURE",
    "UNDEFINED",
]
disable = [
    "raw-checker-failed",
    "bad-inline-option",
    "locally-disabled",
    "file-ignored",
    "suppressed-message",
    "useless-suppression",
    "deprecated-pragma",
    "use-symbolic-message-instead",
    "use-implicit-booleaness-not-comparison-to-string",
    "missing-module-docstring",
    "too-few-public-methods",
]

[tool.pylint."TYPECHECK"]
contextmanager-decorators = "contextlib.contextmanager"
ignore-on-opaque-inference = "yes"
ignored-checks-for-mixins = [
    "no-member",
    "not-async-context-manager",
    "not-context-manager",
    "attribute-defined-outside-ini",
]
missing-member-hint = "yes"
missing-member-hint-distance = 1
missing-member-max-choices = 1

[tool.pylint."VARIABLES"] # Regex pattern to define which classes are considered mixins.
ignored-argument-names = "_.*|^ignored_|^unused_"
init-import = "no"

[tool.pytest.ini_options]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test", "Acceptance"]
python_functions = ["test_*"]
testpaths = "tests"
log_cli = true
log_cli_level = "INFO"
filterwarnings = "error"
addopts = '''
    -x
    -s
    -vvv
    -p no:warnings
    --strict-markers
    --tb=short
    --cov=src
    --cov-branch
    --cov-report=term-missing
    --cov-fail-under=40
'''

[tool.ruff]
line-length = 100

[tool.ruff.lint]
select = ["B", "E", "F", "W", "Q", "I"]

[tool.ruff.format]
docstring-code-format = true
docstring-code-line-length = 20

[tool.basedpyright]
reportAny = false
reportMissingParameterType = false
reportMissingSuperCall = false
reportMissingTypeStubs = false
reportUnknownArgumentType = false
reportUnknownMemberType = false
reportUnknownParameterType = false
reportUnknownVariableType = false
reportUnusedCallResult = false
